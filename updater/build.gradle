plugins {
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    id 'java'
    id "application"
}

group 'rscvanilla'
version 'pre-alpha'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.hamcrest:hamcrest:2.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "com.google.guava:guava:30.1-jre"
    implementation "org.apache.commons:commons-lang3:3.11"
    implementation "org.apache.commons:commons-io:1.3.2"
    implementation "com.google.inject:guice:5.0.0-BETA-1"
    implementation "com.beust:jcommander:1.78"
    implementation "ch.qos.logback:logback-classic:1.2.3"
    implementation "ch.qos.logback:logback-core:1.2.3"
    implementation "org.slf4j:slf4j-api:1.7.30"
    implementation project(':model')

}

test {
    useJUnitPlatform()
}

def projectDir = project(':updater').projectDir
def buildDir = project.buildDir

mainClassName = "rscvanilla.hook.updater.Main"

def distDir = "${buildDir}/dist"
def libsDir = "${buildDir}/libs"

def archiveName = "hook-updater";
def versionedDirName = "hook-updater-${project.version}"
def inputJarsDirName = "input"

shadowJar {
    manifest {
        attributes 'Class-Path': '/libs/java-decompiler.jar'
        archivesBaseName = archiveName
        version(null)
        classifier(null)
    }
}

task cleanDistDir(type: Delete) {
    dependsOn shadowJar

    doLast {
        delete distDir
    }
}

task copyJarToDist(type: Copy) {
    dependsOn cleanDistDir
    from "${libsDir}/${archiveName}.jar" into "${distDir}"
}

task moveArtifactsToVersionedDir {
    dependsOn copyJarToDist

    doLast {
        ant.move file: "${distDir}/${archiveName}.jar", todir: "${distDir}/${versionedDirName}"
    }
}

task generateInputDir() {
    dependsOn moveArtifactsToVersionedDir

    mkdir "${distDir}/${versionedDirName}/${inputJarsDirName}"
}

task createRunInputScripts(type: CreateStartScripts) {
    dependsOn generateInputDir

    applicationName = "run-with-input"
    outputDir = file("${distDir}/${versionedDirName}")
    doLast {
        delete unixScript
        windowsScript.text = "@echo off\njava -jar hook-updater.jar -o %cd%/input/old.jar -n %cd%/input/new.jar\n@echo on\npause"
    }
}

task zipVersionedDir(type: Zip) {
    dependsOn createRunInputScripts

    archiveFileName = "${versionedDirName}.zip"
    destinationDirectory = file(distDir)
    from "${distDir}/${versionedDirName}"
}

task publish() {
    dependsOn zipVersionedDir
    doLast {
        println "Publishing ${versionedDirName}."
    }
}



